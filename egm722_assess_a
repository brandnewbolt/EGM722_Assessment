"""Queries data and produces map regarding geology, landform and borehole details within the Central Highlands in Tasmania.

[a] loads vector layers: lga, land, water, roads and boreholes
[b] crs checked and changed to match all layers
[c] lga clipped to Central Highlands only (producing ch_lga)
[d] files are clipped to ch_lga [producing e.g. land_clip]
[e] spatial join between land and water [producing join_lw]
[f] spatial join between join_lw and bhs [producing join_lwbhs]
[g] run some queries; checks number of rows; groupby determines counts and length sums of bhs present/ geological strata and age;
inserts new column with area km2; groupby determines land and rock area in km2
[h] creates map, defines myCRS, creates axis, plots all vector layers, creates associated handles for legend and plots legend,
adds title
[i] saves output"""

# this lets us use the figures interactively
%matplotlib notebook

#[1] imports libraries and modules
#imports modules
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from cartopy.feature import ShapelyFeature
import cartopy.crs as ccrs
import matplotlib.patches as mpatches
import matplotlib.lines as mlines
from matplotlib_scalebar.scalebar import ScaleBar
from shapely.geometry.point import Point

#enable interactive plotting
plt.ion()

#[2] defines functions
#function generates handles to create legend for polygon map features (practical 2); defines handle characteristics
#which require input when function is called, calls colours to be selected from and then assigns characteristics to the legend entries (as patches)
def generate_handles(labels, colors, edge='k', alpha=1):
    lc = len(colors)  # get the length of the color list
    handles = []
    for i in range(len(labels)):
        handles.append(mpatches.Rectangle((0, 0), 1, 1, facecolor=colors[i % lc], edgecolor=edge, alpha=alpha))
    return handles

#[3] loads datasets, checks and changes CRS
#loads lga vector outline polygon for central highlands, checks row header and CRS
lga = gpd.read_file('data/tas_lga.shp')
print(lga.head())

#loads land vector polygons for tasmania, checks row header and CRS
land = gpd.read_file('data/land_100k.shp')
print(land.head())

#loads water vector polygons for tasmania, check row header and CRS
water = gpd.read_file('data/water.shp')
print(water.head())

#loads roads vector lines for tasmania, checks row header and CRS
roads = gpd.read_file('data/tas_roads.shp')
print(roads.head())

#loads boreholes vector points for tasmania, checks row header and CRS
bhs = gpd.read_file('data/drill_eng_geo.shp')
print(bhs.head())

#checks crs of each layer
print(lga.crs)
print(land.crs)
print(water.crs)
print(roads.crs)
print(bhs.crs)


#changes projection to match layers
https://epsg.io/32755
lga = lga.to_crs(epsg=32755)
land = land.to_crs(epsg=32755)
water = water.to_crs(epsg=32755)
roads = roads.to_crs(epsg=32755)
bhs = bhs.to_crs(epsg=32755)

#checks all crs match, returns true or false
lga.crs == land.crs == water.crs == roads.crs == bhs.crs

#[4] manipulates and queries datasets
#creates a subset of tas lgas to get central highlands lga polygon only
#see https://geopandas.org/en/stable/gallery/plot_clip.html
ch_lga = lga[lga["LGA_NAME"] == "Central Highlands Council"]

#plots extent of lga
ch_lga.plot()

#clips all state wide vector layers to central highlands lga subset
#see https://geopandas.org/en/stable/docs/reference/api/geopandas.clip.html
land_clip = gpd.clip(land, ch_lga)
water_clip = gpd.clip(water, ch_lga)
roads_clip = gpd.clip(roads, ch_lga)
bhs_clip = gpd.clip(bhs, ch_lga)

#plots clipped vector layers to see how this worked
#see https://geopandas.org/en/stable/gallery/spatial_joins.html
land_clip.plot()
water_clip.plot()
roads_clip.plot()
bhs_clip.plot()

#spatially joins between clipped land and water layers, shows table and check no. rows (660)
join_lw = gpd.sjoin(land_clip, water_clip, how='inner', lsuffix='left', rsuffix='right')
print(join_lw.head())
len(join_lw)

#drops the index_right column in order to do second join (python wont allow multiple columns by same name)
join_lw.drop('index_right', axis=1, inplace=True)

#spatially joins bhs to landwater, check no of rows (376)
#join bhs to land water vector
join_lwbhs = gpd.sjoin(bhs_clip, join_lw, how="inner", op="within")
len(join_lwbhs)

#checks column index
join_lwbhs.columns

#drops unused columns to tidy table and better view data
join_lwbhs.drop(['Index_right', 'URL_LINK', 'WB_ID', 'SUBCAT_ID', 'WB_MAP', 'WB_INFO', 'PURPOSE', 'COMPANY', 'DRILL_TYPE'], axis=1, inplace=True)

#prints head of join_lwbhs
print(join_lwbhs.head())

#prints unique values in each column
print(join_lw.nunique())

#prints unique values in each column
print(join_lwbhs.nunique())

#names each rock type, geological age and count of bhs in each rock category in central highlands
print(join_lwbhs.groupby(['ROCK', 'GEO_AGE', 'NAME'])['LENGTH'].count())

#names each rock, geo age and sum of bhs depth in each rock category in central highlands
print(join_lwbhs.groupby(['ROCK', 'GEO_AGE', 'NAME'])['LENGTH'].sum())

#derives new data and inserts a column with area_km2 into lw
#https://pandas.pydata.org/docs/getting_started/intro_tutorials/05_add_columns.html
join_lw["AREA_KM2"] = join_lw["SHAPE_AREA"] / 1000000

#checks landform category areas; firstly groups data by class
#https://autogis-site.readthedocs.io/en/latest/notebooks/L2/01-geopandas-basics.html
grouped_landform = join_lw.groupby('LANDFORM')

# then iterates over the group
for key, group in grouped_landform:

#checks how many rows each group has:
    print('Landform:', key)
    print('Number of rows:', len(group), "\n")

#shows what area in km2 is covered by each land class
landform_area = grouped_landform.AREA_KM2.sum()
print(landform_area)

#checks rock category areas; firstly groups data by class
#https://autogis-site.readthedocs.io/en/latest/notebooks/L2/01-geopandas-basics.html
grouped_rock = join_lw.groupby('ROCK')

# then iterates over the group
for key, group in grouped_rock:

    # checks how many rows each group has:
    print('Rock:', key)
    print('Number of rows:', len(group), "\n")

#shows what area in km2 is covered by each rock type class
rock_area = grouped_rock.AREA_KM2.sum()
print(rock_area)


#[5] map presentation
#creates a map view
myFig = plt.figure(figsize=(10, 10))

#defines my crs as UTM ref for Tasmania
myCRS = ccrs.UTM(55, southern_hemisphere=True)

#creates an axis on which to plot data
#https://scitools.org.uk/cartopy/docs/v0.15/_modules/cartopy/crs.html#UTM for projection
ax = plt.axes(projection=ccrs.Mercator())

#assigns and adds western highlands lga polygon from subset
ch_lga_feature = ShapelyFeature(ch_lga['geometry'], myCRS, edgecolor='k', facecolor='w')
xmin, ymin, xmax, ymax = ch_lga.total_bounds
ax.add_feature(ch_lga_feature) # add the outline feature to the map.

#using the boundary of the shapefile features, zooms the map to our area of interest
ax.set_extent([xmin, xmax, ymin, ymax], crs=myCRS)

#plots rock types; firstly defining how many unique rock types there are (9)
num_rock = len(land_clip.ROCK.unique())
print('Number of unique features: {}'.format(num_rock))

#selects colors for the 9 individual rock polygons
rock_colors = ['r','lightcoral','deeppink','darkviolet','dodgerblue','yellow','orange','mediumblue','green',]

#drops any null values from rock column (i.e. if polygons with no names exist)
#https://stackoverflow.com/questions/44681776/ignoring-nan-in-a-dataframe
rock_names = land_clip['ROCK'].dropna().unique()
rock_names.sort()
rock_names

#adds the rock polygon colours to the map using the colors above by iterating over the unique values in the 'ROCK' field
#also defines features characteristics
for i, name in enumerate(rock_names):
    feat = ShapelyFeature(land_clip['geometry'][land_clipped['ROCK'] == name], myCRS,
                          edgecolor='k',
                          facecolor=rock_colors[i],
                          linewidth=1,
                          alpha=0.25)
    ax.add_feature(feat)

#myFig # shows the updated figure

#adds polygon and line vectors to map
water_feat = ShapelyFeature(water_clip['geometry'], myCRS,
                            edgecolor='mediumblue',
                            facecolor='mediumblue',
                            linewidth=2)
ax.add_feature(water_feat)

roads_feat = ShapelyFeature(roads_clip['geometry'], myCRS,
                            edgecolor='black',
                            linewidth=1.5)

ax.add_feature(roads_feat)

#assigns and plots point data handles using ax.plot()
bhs_handles = ax.plot(bhs_clip.geometry.x, bhs_clip.geometry.y, 'h', ms=8, c='r', transform=myCRS)

#details a legend to match the colours plotted above
#generates a list of handles for the rock type
rock_handles = generate_handles(land_clip.ROCK.unique(), rock_colors, alpha=0.25)

#generates water handle
water_handles = generate_handles(['Lakes'], ['mediumblue'])

#generates roads handle
roads_handles = [mlines.Line2D([], [], color='black')]

#enables rock type polygons to be added to legend and updates ROCK names for consistency
nice_names = [name.title() for name in rock_names]

#ax.legend() takes a list of handles and a list of labels corresponding to the objects you want to add to the legend
handles = rock_handles + bhs_handles + water_handles + roads_handles
labels = nice_names + ['Boreholes', 'Lakes', 'Roads']

#adds legend
#place legend off the side of fig https://stackoverflow.com/questions/4700614/how-to-put-the-legend-outside-the-plot-in-matplotlib?newreg=300ab0ba0af340879f2d222287d21c2c
leg = ax.legend(handles, labels, title='Legend', title_fontsize=14,
                 fontsize=12, bbox_to_anchor=(1.04,0.7), loc='upper left', frameon=True, framealpha=1)
#adds a title
ax.set_title('Geological strata and borehole locations in Central Higlands, Tasmania', fontsize=16)

#adds projected gridlines to map
gridlines = ax.gridlines(draw_labels=True,
                         xlocs=[146, 146.5, 147],
                         ylocs=[-42, -42.5])
gridlines.left_labels = True
gridlines.bottom_labels = True
ax.set_extent([xmin, xmax, ymin, ymax], crs=myCRS) # set the extent to the boundaries of the central highlands polygon

#myFig # to show the updated figure

#adds bh label text, plotting to coordinates in geometry columns
for i, row in bhs_clip.iterrows():
    x, y = row.geometry.x, row.geometry.y # get the x,y location for each bh
    ax.text(x, y, row['NAME'].title(), fontsize=8, transform=myCRS) # use ax.text to place a label at x,y

#add a scalebar from https://geopandas.org/en/stable/gallery/matplotlib_scalebar.html#Geographic-coordinate-system-(degrees)
ax.add_artist(ScaleBar(1))

#saves figure
myFig.savefig('tas_geo.png', bbox_inches='tight', dpi=300)